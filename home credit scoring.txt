{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.model_selection import train_test_split, GridSearchCV\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.metrics import roc_auc_score, classification_report, roc_curve, confusion_matrix\n",
    "from imblearn.over_sampling import SMOTE\n",
    "\n",
    "# Load dataset\n",
    "df = pd.read_csv('home-credit-default-risk/application_train.csv')\n",
    "bureau = pd.read_csv('home-credit-default-risk/bureau.csv')\n",
    "\n",
    "# Aggregasi bureau\n",
    "bureau_agg = bureau.groupby('SK_ID_CURR').agg({\n",
    "    'CREDIT_ACTIVE': lambda x: (x == 'Active').sum(),\n",
    "    'AMT_CREDIT_SUM': 'mean',\n",
    "    'DAYS_CREDIT': 'mean',\n",
    "    'SK_ID_BUREAU': 'count'\n",
    "}).rename(columns={\n",
    "    'CREDIT_ACTIVE': 'BUREAU_ACTIVE_COUNT',\n",
    "    'AMT_CREDIT_SUM': 'BUREAU_CREDIT_SUM_MEAN',\n",
    "    'DAYS_CREDIT': 'BUREAU_DAYS_CREDIT_MEAN',\n",
    "    'SK_ID_BUREAU': 'BUREAU_CREDIT_COUNT'\n",
    "}).reset_index()\n",
    "\n",
    "# Gabungkan dengan application_train\n",
    "df = pd.merge(df, bureau_agg, on='SK_ID_CURR', how='left')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1. Eksplorasi Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Distribusi TARGET\n",
    "sns.countplot(x='TARGET', data=df)\n",
    "plt.title('Distribusi TARGET (0: Non-Default, 1: Default)')\n",
    "plt.savefig('target_distribution.png', dpi=300)\n",
    "plt.show()\n",
    "\n",
    "# Missing values (contoh)\n",
    "missing = df.isnull().mean().sort_values(ascending=False)\n",
    "print('Top 5 kolom dengan missing values:')\n",
    "print(missing.head())\n",
    "\n",
    "# Distribusi pendapatan\n",
    "sns.histplot(df['AMT_INCOME_TOTAL'].clip(upper=1e6), bins=50)\n",
    "plt.title('Distribusi Pendapatan')\n",
    "plt.savefig('income_distribution.png', dpi=300)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2. Data Cleaning dan Processing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Hapus kolom dengan missing >70%\n",
    "missing = df.isnull().mean()\n",
    "df = df.loc[:, missing < 0.7]\n",
    "\n",
    "# Imputasi\n",
    "df['AMT_ANNUITY'].fillna(df['AMT_ANNUITY'].median(), inplace=True)\n",
    "df['OCCUPATION_TYPE'].fillna('Unknown', inplace=True)\n",
    "df['BUREAU_ACTIVE_COUNT'].fillna(0, inplace=True)\n",
    "df['BUREAU_CREDIT_SUM_MEAN'].fillna(df['BUREAU_CREDIT_SUM_MEAN'].median(), inplace=True)\n",
    "df['BUREAU_DAYS_CREDIT_MEAN'].fillna(df['BUREAU_DAYS_CREDIT_MEAN'].median(), inplace=True)\n",
    "df['BUREAU_CREDIT_COUNT'].fillna(0, inplace=True)\n",
    "\n",
    "# One-Hot Encoding\n",
    "df = pd.get_dummies(df, columns=['CODE_GENDER', 'NAME_CONTRACT_TYPE', 'OCCUPATION_TYPE'], drop_first=True)\n",
    "\n",
    "# Normalisasi\n",
    "scaler = StandardScaler()\n",
    "num_cols = ['AMT_INCOME_TOTAL', 'AMT_CREDIT', 'AMT_ANNUITY', 'DAYS_BIRTH', 'BUREAU_CREDIT_SUM_MEAN', 'BUREAU_DAYS_CREDIT_MEAN']\n",
    "df[num_cols] = scaler.fit_transform(df[num_cols])\n",
    "\n",
    "# Split data\n",
    "X = df.drop(['TARGET', 'SK_ID_CURR'], axis=1)\n",
    "y = df['TARGET']\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "\n",
    "# SMOTE\n",
    "smote = SMOTE(random_state=42)\n",
    "X_train_sm, y_train_sm = smote.fit_resample(X_train, y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3. Pemodelan"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Logistic Regression\n",
    "lr = LogisticRegression(random_state=42, max_iter=1000)\n",
    "lr_params = {'C': [0.01, 0.1, 1, 10]}\n",
    "lr_grid = GridSearchCV(lr, lr_params, cv=5, scoring='roc_auc')\n",
    "lr_grid.fit(X_train_sm, y_train_sm)\n",
    "print('Best LR AUC:', lr_grid.best_score_)\n",
    "\n",
    "# Random Forest\n",
    "rf = RandomForestClassifier(random_state=42)\n",
    "rf_params = {\n",
    "    'n_estimators': [100, 200],\n",
    "    'max_depth': [10, 20, None]\n",
    "}\n",
    "rf_grid = GridSearchCV(rf, rf_params, cv=5, scoring='roc_auc')\n",
    "rf_grid.fit(X_train_sm, y_train_sm)\n",
    "print('Best RF AUC:', rf_grid.best_score_)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 4. Evaluasi"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Prediksi\n",
    "y_pred_lr = lr_grid.predict(X_test)\n",
    "y_pred_rf = rf_grid.predict(X_test)\n",
    "\n",
    "# Evaluasi\n",
    "print('Logistic Regression:')\n",
    "print(classification_report(y_test, y_pred_lr))\n",
    "print('ROC AUC:', roc_auc_score(y_test, lr_grid.predict_proba(X_test)[:, 1]))\n",
    "\n",
    "print('Random Forest:')\n",
    "print(classification_report(y_test, y_pred_rf))\n",
    "print('ROC AUC:', roc_auc_score(y_test, rf_grid.predict_proba(X_test)[:, 1]))\n",
    "\n",
    "# ROC Curve (terpisah untuk PPT)\n",
    "fpr_lr, tpr_lr, _ = roc_curve(y_test, lr_grid.predict_proba(X_test)[:, 1])\n",
    "plt.plot(fpr_lr, tpr_lr, label='Logistic Regression', color='blue')\n",
    "plt.plot([0, 1], [0, 1], 'k--')\n",
    "plt.xlabel('False Positive Rate')\n",
    "plt.ylabel('True Positive Rate')\n",
    "plt.title('ROC Curve: Logistic Regression')\n",
    "plt.legend()\n",
    "plt.savefig('roc_curve_lr.png', dpi=300)\n",
    "plt.show()\n",
    "\n",
    "fpr_rf, tpr_rf, _ = roc_curve(y_test, rf_grid.predict_proba(X_test)[:, 1])\n",
    "plt.plot(fpr_rf, tpr_rf, label='Random Forest', color='red')\n",
    "plt.plot([0, 1], [0, 1], 'k--')\n",
    "plt.xlabel('False Positive Rate')\n",
    "plt.ylabel('True Positive Rate')\n",
    "plt.title('ROC Curve: Random Forest')\n",
    "plt.legend()\n",
    "plt.savefig('roc_curve_rf.png', dpi=300)\n",
    "plt.show()\n",
    "\n",
    "# Feature Importance\n",
    "feat_importance = pd.Series(rf_grid.best_estimator_.feature_importances_, index=X_train.columns)\n",
    "feat_importance.nlargest(5).plot(kind='barh', color='green')\n",
    "plt.title('Top 5 Feature Importance')\n",
    "plt.savefig('feature_importance.png', dpi=300)\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}